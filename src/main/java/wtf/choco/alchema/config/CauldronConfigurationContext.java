package wtf.choco.alchema.config;

import org.jetbrains.annotations.NotNull;

/**
 * Represents a collection of configurable values for alchemical cauldrons.
 *
 * @author Parker Hawke - Choco
 */
public interface CauldronConfigurationContext {

    /**
     * Get the interval of time (in ticks) cauldrons will wait before searching for nearby
     * items to collect them as ingredients.
     *
     * @return the item search interval
     */
    public int getItemSearchInterval();

    /**
     * Get the time (in milliseconds) it takes for cauldrons to heat up.
     *
     * @return the milliseconds to heat up
     */
    public int getMillisecondsToHeatUp();

    /**
     * Check whether or not cauldrons should damage entities in boiling water.
     *
     * @return true if damage should be inflicted, false otherwise
     */
    public boolean shouldDamageEntities();

    /**
     * Get the minimum amount of essence generated by entities killed in a cauldron.
     *
     * @return the minimum essence on death
     */
    public int getMinEssenceOnDeath();

    /**
     * Get the maximum amount of essence generated by entities killed in a cauldron.
     *
     * @return the maximum essence on death
     */
    public int getMaxEssenceOnDeath();

    /**
     * Get the volume at which the ambient bubbling sound will be played.
     *
     * @return the ambient bubble volume
     */
    public float getAmbientBubbleVolume();

    /**
     * Get the volume at which the item splash sound will be played.
     *
     * @return the item splash volume
     */
    public float getItemSplashVolume();

    /**
     * Get the volume at which the successful craft sound will be played.
     *
     * @return the successful craft volume
     */
    public float getSuccessfulCraftVolume();

    /**
     * Get a new builder instance to construct an instance of {@link CauldronConfigurationContext}.
     *
     * @return a context builder
     */
    @NotNull
    public static CauldronConfigurationContextBuilder builder() {
        return new CauldronConfigurationContextBuilder();
    }


    /**
     * A class to construct instances of {@link CauldronConfigurationContext}.
     */
    public static final class CauldronConfigurationContextBuilder {

        private int itemSearchInterval = 1;
        private int millisecondsToHeatUp = 5000;

        private boolean damageEntities = true;
        private int minEssenceOnDeath = 50, maxEssenceOnDeath = 100;

        private float ambientBubbleVolume = 0.45F, itemSplashVolume = 1.0F, successfulCraftVolume = 0.5F;

        private CauldronConfigurationContextBuilder() { }

        /**
         * Set the item search interval.
         *
         * @param itemSearchInterval the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder itemSearchInterval(int itemSearchInterval) {
            this.itemSearchInterval = itemSearchInterval;
            return this;
        }

        /**
         * Set the milliseconds to heat up.
         *
         * @param millisecondsToHeatUp the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder millisecondsToHeatUp(int millisecondsToHeatUp) {
            this.millisecondsToHeatUp = millisecondsToHeatUp;
            return this;
        }

        /**
         * Set the damage entities value
         *
         * @param damageEntities the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder damageEntities(boolean damageEntities) {
            this.damageEntities = damageEntities;
            return this;
        }

        /**
         * Set the minimum essence on death.
         *
         * @param minEssenceOnDeath the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder minEssenceOnDeath(int minEssenceOnDeath) {
            this.minEssenceOnDeath = minEssenceOnDeath;
            return this;
        }

        /**
         * Set the maximum essence on death.
         *
         * @param maxEssenceOnDeath the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder maxEssenceOnDeath(int maxEssenceOnDeath) {
            this.maxEssenceOnDeath = maxEssenceOnDeath;
            return this;
        }

        /**
         * Set the ambient bubble volume.
         *
         * @param ambientBubbleVolume the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder ambientBubbleVolume(float ambientBubbleVolume) {
            this.ambientBubbleVolume = ambientBubbleVolume;
            return this;
        }

        /**
         * Set the item splash volume.
         *
         * @param itemSplashVolume the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder itemSplashVolume(float itemSplashVolume) {
            this.itemSplashVolume = itemSplashVolume;
            return this;
        }

        /**
         * Set the successful craft volume.
         *
         * @param successfulCraftVolume the value to set
         *
         * @return this instance. Allows for chained method calls
         */
        @NotNull
        public CauldronConfigurationContextBuilder successfulCraftVolume(float successfulCraftVolume) {
            this.successfulCraftVolume = successfulCraftVolume;
            return this;
        }

        /**
         * Build the {@link CauldronConfigurationContext}.
         *
         * @return the built instance
         */
        @NotNull
        public CauldronConfigurationContext build() {
            return new SimpleCauldronConfigurationContext(
                itemSearchInterval,
                millisecondsToHeatUp,
                damageEntities,
                minEssenceOnDeath,
                maxEssenceOnDeath,
                ambientBubbleVolume,
                itemSplashVolume,
                successfulCraftVolume
            );
        }

    }

    /**
     * A simple implementation of {@link CauldronConfigurationContext}.
     */
    public static final class SimpleCauldronConfigurationContext implements CauldronConfigurationContext {

        private final int itemSearchInterval;
        private final int millisecondsToHeatUp;

        private final boolean damageEntities;
        private final int minEssenceOnDeath, maxEssenceOnDeath;

        private final float volumeAmbientBubble, volumeItemSplash, volumeSuccessfulCraft;

        private SimpleCauldronConfigurationContext(int itemSearchInterval, int millisecondsToHeatUp, boolean damageEntities, int minEssenceOnDeath, int maxEssenceOnDeath, float volumeAmbientBubble, float volumeItemSplash, float volumeSuccessfulCraft) {
            this.itemSearchInterval = itemSearchInterval;
            this.millisecondsToHeatUp = millisecondsToHeatUp;
            this.damageEntities = damageEntities;
            this.minEssenceOnDeath = minEssenceOnDeath;
            this.maxEssenceOnDeath = maxEssenceOnDeath;
            this.volumeAmbientBubble = volumeAmbientBubble;
            this.volumeItemSplash = volumeItemSplash;
            this.volumeSuccessfulCraft = volumeSuccessfulCraft;
        }

        @Override
        public int getItemSearchInterval() {
            return itemSearchInterval;
        }

        @Override
        public int getMillisecondsToHeatUp() {
            return millisecondsToHeatUp;
        }

        @Override
        public boolean shouldDamageEntities() {
            return damageEntities;
        }

        @Override
        public int getMinEssenceOnDeath() {
            return minEssenceOnDeath;
        }

        @Override
        public int getMaxEssenceOnDeath() {
            return maxEssenceOnDeath;
        }

        @Override
        public float getAmbientBubbleVolume() {
            return volumeAmbientBubble;
        }

        @Override
        public float getItemSplashVolume() {
            return volumeItemSplash;
        }

        @Override
        public float getSuccessfulCraftVolume() {
            return volumeSuccessfulCraft;
        }

    }

}
